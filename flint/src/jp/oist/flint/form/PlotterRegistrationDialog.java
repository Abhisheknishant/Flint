/* -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:set ts=4 sw=4 sts=4 et: */
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jp.oist.flint.form;

import jp.oist.flint.control.FileChooser;
import jp.oist.flint.plotter.PlotterLoadException;
import jp.oist.flint.plotter.PlotterLoader;
import java.awt.Frame;
import java.io.File;
import java.io.IOException;
import java.util.prefs.BackingStoreException;
import javax.swing.JOptionPane;

/**
 * This is the class of a form for registering plotter.
 */
public class PlotterRegistrationDialog extends javax.swing.JDialog {

    /**
     * Creates new form PlotterRegistrationDialog
     */
    public PlotterRegistrationDialog(Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        setLocationRelativeTo(parent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelPlotterId = new javax.swing.JLabel();
        textFieldPlotterId = new javax.swing.JTextField();
        labelPlotterPath = new javax.swing.JLabel();
        textFieldPlotterPath = new javax.swing.JTextField();
        buttonPlotterPathSelect = new javax.swing.JButton();
        buttonAddPlotterCancel = new javax.swing.JButton();
        buttonAddPlotterOk = new javax.swing.JButton();
        textFieldPlotterClass = new javax.swing.JTextField();
        labelPlotterClass = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Register Plotter");

        labelPlotterId.setText("Plotter ID:");

        labelPlotterPath.setText("Plotter Path:");

        buttonPlotterPathSelect.setText("Select");
        buttonPlotterPathSelect.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlotterPathSelectActionPerformed(evt);
            }
        });

        buttonAddPlotterCancel.setText("Cancel");
        buttonAddPlotterCancel.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddPlotterCancelActionPerformed(evt);
            }
        });

        buttonAddPlotterOk.setText("OK");
        buttonAddPlotterOk.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddPlotterOkActionPerformed(evt);
            }
        });

        labelPlotterClass.setText("Plotter Class:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelPlotterId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textFieldPlotterId, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelPlotterPath)
                            .addComponent(labelPlotterClass))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textFieldPlotterClass, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textFieldPlotterPath, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(buttonAddPlotterOk)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonAddPlotterCancel)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonPlotterPathSelect)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldPlotterId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelPlotterId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldPlotterClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelPlotterClass))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonPlotterPathSelect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonAddPlotterOk)
                            .addComponent(buttonAddPlotterCancel)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelPlotterPath)
                        .addComponent(textFieldPlotterPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showMessageDialog(String message, int type) {
        JOptionPane.showMessageDialog(this, message, "Registering Plotter", type);
    }

    private void buttonPlotterPathSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlotterPathSelectActionPerformed
        FileChooser fc = new FileChooser(this, "Select path", FileChooser.Mode.LOAD, "");
        if (!fc.showDialog()) return;
        File file = fc.getSelectedFile();
        if (file.isFile()) {
            try {
                textFieldPlotterPath.setText(file.getCanonicalPath());
            } catch (IOException ioe) {
                showMessageDialog(ioe.getMessage(), JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_buttonPlotterPathSelectActionPerformed

    private void buttonAddPlotterCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddPlotterCancelActionPerformed
        dispose();
    }//GEN-LAST:event_buttonAddPlotterCancelActionPerformed

    private void buttonAddPlotterOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddPlotterOkActionPerformed
        String plotterId = textFieldPlotterId.getText();
        String plotterClass = textFieldPlotterClass.getText();
        String plotterPath = textFieldPlotterPath.getText();
        if (plotterId.isEmpty()) {
            showMessageDialog("Plotter ID is empty", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (plotterClass.isEmpty()) {
            showMessageDialog("Plotter Class is empty", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (plotterPath.isEmpty()) {
            showMessageDialog("Plotter Path is empty", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (PlotterLoader.exists(plotterId)) {
            showMessageDialog("deplicate Plotter ID", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            PlotterLoader.load(plotterId, plotterClass, plotterPath);
            PlotterLoader.register(plotterId, plotterClass, plotterPath);
        } catch (ClassNotFoundException | IOException | IllegalAccessException | InstantiationException | PlotterLoadException | BackingStoreException e) {
            showMessageDialog(e.getMessage(), JOptionPane.ERROR_MESSAGE);
            return;
        }
        dispose();
    }//GEN-LAST:event_buttonAddPlotterOkActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAddPlotterCancel;
    private javax.swing.JButton buttonAddPlotterOk;
    private javax.swing.JButton buttonPlotterPathSelect;
    private javax.swing.JLabel labelPlotterClass;
    private javax.swing.JLabel labelPlotterId;
    private javax.swing.JLabel labelPlotterPath;
    private javax.swing.JTextField textFieldPlotterClass;
    private javax.swing.JTextField textFieldPlotterId;
    private javax.swing.JTextField textFieldPlotterPath;
    // End of variables declaration//GEN-END:variables
}
