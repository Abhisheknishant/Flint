/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- vim:set ts=4 sw=4 sts=4 noet: */
/*
 * merge multiple isdf files generated by a parallel simulation
 * TODO: dynamic objects addition
 * TODO: endian conversion
 *
 */
#include <iostream>
#include <iomanip>
#include <fstream>
#include <memory>
#include <string>
#include <sstream>
#include <vector>
#include <utility>

#include <boost/program_options.hpp>

#include "isdf/isdf.h"
#include "isdf/reader.h"

namespace po = boost::program_options;

using std::ios;
using std::ostream;
using std::ofstream;
using std::ifstream;
using std::string;
using std::stringstream;
using std::vector;

using namespace flint;

void OutputHeader(ostream &ost, size_t num_objs, string &descriptions, string &units);

int main(int argc, char *argv[]) {
	po::options_description opts("options");
	po::positional_options_description popts;
	po::variables_map vm;
	string output_file;
	int print_help = 0;

	opts.add_options()
		("help,h", "Show this message")
		("output,o", po::value<string>(&output_file), "Output file path (default: merged.isd)")
		("input-files", po::value<vector<string> >(), "List of input files");
	popts.add("input-files", -1);

	try {
		po::store(po::command_line_parser(argc, argv).options(opts).positional(popts).run(), vm);
		po::notify(vm);
		if (vm.count("help")) print_help = 1;
	} catch (const po::error &) {
		print_help = 2;
	}
	if (print_help != 0 || !vm.count("input-files")) {
		std::cerr << "usage: isdmerge [OPTIONS] input-files" << std::endl;
		std::cerr << opts;
		return (print_help == 1) ? EXIT_SUCCESS : EXIT_FAILURE;
	}

	// open files
	vector<string> input_files = vm["input-files"].as<vector<string> >();
	std::unique_ptr<ifstream[]> ifs(new ifstream[input_files.size()]);
	for(size_t i = 0; i < input_files.size(); i++) {
		ifs[i].open(input_files[i].c_str(), ios::binary|ios::in);
		if (!ifs[i]) {
			std::cerr << "error. can't open file " << input_files[i].c_str();
			std::cerr << ". ignore this file." << std::endl;
		}
	}

	// read headers to gather all object descriptions
	size_t num_objs = 0;
	vector<size_t> vals_in_file;
	vector<size_t> pos_of_time; // 0: "time" doesnot exist
	bool has_units = true;
	stringstream ss_desc,ss_unit;
	for(size_t i = 0; i < input_files.size(); i++) {
		if (!ifs[i]) continue;
		isdf::Reader reader;
		if ( !reader.ReadHeader(&ifs[i]) ||
			 !reader.SkipComment(&ifs[i]) ||
			 !reader.ReadDescriptions(&ifs[i]) ||
			 !reader.ReadUnits(&ifs[i]) ) {
			ifs[i].close();
			std::cerr << "error on " << input_files[i].c_str();
			std::cerr << ". ignore this file." << std::endl;
			continue;
		}

		pos_of_time.push_back(0);
		vals_in_file.push_back(reader.num_objs());
		num_objs += reader.num_objs();
		const char *rd = reader.descriptions();
		const char *ru;
		if (reader.num_bytes_units() > 0 ) {
			if (!has_units) {
				std::cerr << "missing units in " << input_files[i].c_str() << std::endl;
				return EXIT_FAILURE;
			}
			ru = reader.units();
		} else {
			ru = nullptr;
			has_units = false;
		}
		for(size_t j = 0; j < reader.num_objs(); j++) {
			std::uint32_t bytes = *reinterpret_cast<const std::uint32_t *>(rd);
			rd += sizeof(bytes);
			string name(rd, bytes);
			rd += bytes;
			//read unit
			std::uint32_t bu = 0;
			string unit;
			if (has_units) {
				bu = *reinterpret_cast<const std::uint32_t *>(ru);
				ru += sizeof(bu);
				unit.assign(ru, bu);
				ru += bu;
			}

			if (name == "time" && i != 0) { // skip "time" excepting the 1st input file
				num_objs--;
				pos_of_time[i] = j+1;
			} else {
				ss_desc.write((char*)&bytes, sizeof(bytes));
				ss_desc << name;
				if (has_units) {
					ss_unit.write((char*)&bu, sizeof(bu));
					ss_unit << unit;
				}
			}
		}
	}

	// output merged header
	string str = ss_desc.str();
	if (!vm.count("output")) {
		output_file = "merged.isd";
	}
	ofstream ofs(output_file.c_str(), ios::binary|ios::out);
	if (!ofs.is_open()) {
		std::cerr << "could not open output file: " << output_file << std::endl;
		return EXIT_FAILURE;
	}
	string ustr = ss_unit.str();
	OutputHeader(ofs, num_objs, str, ustr);

	// read & write vals
	std::unique_ptr<double[]> buf;
	{
		std::vector<size_t>::iterator it = std::max_element(vals_in_file.begin(), vals_in_file.end());
		assert(it != vals_in_file.end());
		buf.reset(new double[*it]);
	}
	bool end_of_file = false;
	while(!end_of_file) {
		for(size_t i = 0; i < input_files.size(); i++) {
			ifs[i].read((char*)buf.get(), sizeof(double)*vals_in_file[i]);
			if (pos_of_time[i] == 0)  { // if not including "time"
				ofs.write((char*)buf.get(), sizeof(double)*vals_in_file[i]);
			} else {
				if (pos_of_time[i] > 1) {
					ofs.write((char*)buf.get(), sizeof(double)*(pos_of_time[i] - 1));
				}
				// skip pos_of_time[i]-th variable, "time"
				if (pos_of_time[i] < vals_in_file[i]) {
					ofs.write((char*)(buf.get() + pos_of_time[i]),
							sizeof(double)*(vals_in_file[i] - pos_of_time[i]));
				}
			}
			if (ifs[i].peek() == EOF) end_of_file = true;
		}
	}

	// close files
	ofs.close();
	for(size_t i = 0; i < input_files.size(); i++) {
		ifs[i].close();
	}
	return EXIT_SUCCESS;
}

void OutputHeader(ostream &ost, size_t num_objs, string &descriptions, string &units) {
	isdf::ISDFHeader oheader;
	oheader.num_objs = static_cast<std::uint32_t>(num_objs);
	oheader.num_bytes_comment = 0; // discard original comments
	oheader.num_bytes_descs = descriptions.size();
	oheader.num_bytes_units = units.size();
	ost.write((char*)&oheader, sizeof(oheader));
	ost << descriptions;
	if (units.size() > 0) ost << units;
	return;
}

