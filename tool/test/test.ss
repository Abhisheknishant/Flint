#!r6rs
(import (xunit)
        (model cas)
        (model lang)
        (model record)
        (chezscheme))

(define (model-list)
  (let* ((m (path-parent (path-parent (current-directory))))
         (s (directory-separator))
         (p (format "~a~atest~amodels" m s s)))
    (filter (lambda (x)
              (and (file-regular? x)
                   (string=? (path-extension x) "ss")))
            (map (lambda (x) (format "~a~a~a" p s x)) (directory-list p)))))

(for-each load (model-list))

(assert-equal? '(t x alpha beta gamma delta omega) (map variable-name (model-variables duffing)))
(let ((es (model-equations duffing)))
  (assert-= 1 (length es))
  (assert-equal? '(plus (diff (bvar (degree 2) t) x) (times delta (diff (bvar t) x)) (times beta x) (times alpha (power x 3)))
                 (equation-lhs (car es)))
  (assert-equal? '(times gamma (cos (times omega t)))
                 (equation-rhs (car es))))

(assert-equal? '(t V W I) (map variable-name (model-variables fitzhugh-nagumo)))
(let ((es (model-equations fitzhugh-nagumo)))
  (assert-= 2 (length es))
  (assert-equal? '(diff (bvar t) V)
                 (equation-lhs (car es)))
  (assert-equal? '(plus (minus (minus V (divide (power V 3) 3)) W) I)
                 (equation-rhs (car es)))
  (assert-equal? '(diff (bvar t) W)
                 (equation-lhs (cadr es)))
  (assert-equal? '(times 0.08 (minus (plus V 0.7) (times 0.8 W)))
                 (equation-rhs (cadr es))))

(assert-equal? '(x y alpha n) (map variable-name (model-variables laguerre)))
(let ((es (model-equations laguerre)))
  (assert-= 1 (length es))
  (assert-equal? '(plus (times x (diff (bvar (degree 2) x) y)) (times (plus (minus alpha x) 1) (diff (bvar x) y)) (times n y))
                 (equation-lhs (car es)))
  (assert-equal? 0
                 (equation-rhs (car es))))

(report)
